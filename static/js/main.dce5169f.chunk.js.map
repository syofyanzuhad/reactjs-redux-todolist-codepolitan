{"version":3,"sources":["components/Form/Form.js","store/actions/todoAction.js","store/actions/actionTypes.js","store/actions/noteAction.js","components/List/TextAndForm.js","components/List/List.js","components/NotesList/NotesList.js","store/index.js","App.js","serviceWorker.js","index.js"],"names":["Form","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onChangeHandler","e","setState","text","target","value","onSubmit","state","choice","addTodos","addNotes","onClickChoice","_this2","styleButtonTodo","styleButtonNotes","react_default","a","createElement","Fragment","className","concat","onClick","onChange","type","placeholder","Component","connect","dispatch","todo","payload","addTodo","note","addNote","TextAndForm","editButtonHandler","viewMode","saveButtonHandler","editTodo","index","cancelButtonHandler","deleteButtonHandler","deleteTodo","buttonEdit","List","todos","map","key","List_TextAndForm","todoReducer","NotesList","notes","noteReducer","initialStateTodos","initialStateNotes","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","toConsumableArray","newTodos","filter","element","store","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","es","components_Form_Form","components_List_List","components_NotesList_NotesList","Boolean","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6QAKMA,cACJ,SAAAA,EAAaC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IAClBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAORQ,gBAAkB,SAACC,GACjBR,EAAKS,SAAS,CAAEC,KAAOF,EAAEG,OAAOC,SATdZ,EAYpBa,SAAW,WACgB,SAAtBb,EAAKc,MAAMC,OACZf,EAAKD,MAAMiB,SAAShB,EAAKc,MAAMJ,MAE/BV,EAAKD,MAAMkB,SAASjB,EAAKc,MAAMJ,MAGjCV,EAAKS,SAAS,CAAEC,KAAM,MAnBJV,EAsBpBkB,cAAgB,SAACN,GACfZ,EAAKS,SAAS,CAAEM,OAAQH,KArBxBZ,EAAKc,MAAQ,CACXJ,KAAM,GACNK,OAAQ,QAJQf,wEA0BV,IAAAmB,EAAAhB,KACJiB,EAAkB,GAClBC,EAAmB,GAMvB,MALyB,SAAtBlB,KAAKW,MAAMC,OACZK,EAAkB,cAElBC,EAAmB,cAGnBC,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UACEE,UAAS,WAAAC,OAAaP,GACtBQ,QAAU,kBAAMT,EAAKD,cAAc,UAFrC,sBAMAI,EAAAC,EAAAC,cAAA,UACEE,UAAS,OAAAC,OAASN,GAClBO,QAAS,kBAAMT,EAAKD,cAAc,WAFpC,uBAMAI,EAAAC,EAAAC,cAAA,gBAAQrB,KAAKW,MAAMC,QACnBO,EAAAC,EAAAC,cAAA,OAAKE,UAAU,cACbJ,EAAAC,EAAAC,cAAA,SACAZ,MAAOT,KAAKW,MAAMJ,KAClBmB,SAAU1B,KAAKI,gBAAiBuB,KAAK,OAAOJ,UAAU,eAAeK,YAAY,oBAEnFT,EAAAC,EAAAC,cAAA,UAAQI,QAASzB,KAAKU,SAAUa,UAAU,mBAA1C,eAvDWM,aAoEJC,cAAQ,KAPI,SAAAC,GACzB,MAAO,CACLlB,SAAU,SAACmB,GAAD,OAAUD,EClED,SAACC,GAAD,MAAW,CAChCL,KCH0B,WDI1BM,QAASD,GDgEsBE,CAAQF,KACrClB,SAAU,SAACqB,GAAD,OAAUJ,EGnED,SAACI,GAAD,MAAW,CAChCR,KDA0B,WCC1BM,QAASE,GHiEsBC,CAAQD,OAI1BL,CAAkCnC,GIrE3C0C,cACJ,SAAAA,EAAYzC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAqC,IACjBxC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAuC,GAAAlC,KAAAH,KAAMJ,KAQR0C,kBAAoB,WAClBzC,EAAKS,SAAS,CAAEiC,SAAU,UAVT1C,EAcnB2C,kBAAoB,WAClB3C,EAAKD,MAAM6C,SAAS5C,EAAKD,MAAM8C,MAAO7C,EAAKc,MAAMJ,MACjDV,EAAKS,SAAS,CAAEiC,SAAU,UAhBT1C,EAoBnB8C,oBAAsB,WACpB9C,EAAKS,SAAS,CAAEiC,SAAU,UArBT1C,EAyBnBO,gBAAkB,SAACC,GACjBR,EAAKS,SAAS,CAAEC,KAAMF,EAAEG,OAAOC,SA1BdZ,EA8BnB+C,oBAAsB,WACpB/C,EAAKD,MAAMiD,WAAWhD,EAAKD,MAAM8C,QA7BjC7C,EAAKc,MAAQ,CACX4B,SAAU,OACVhC,KAAMX,EAAMoC,MAJGnC,wEAoCjB,IAAImC,EACFb,EAAAC,EAAAC,cAAA,SAAIrB,KAAKJ,MAAMoC,MAIbc,EACF3B,EAAAC,EAAAC,cAAA,UACEE,UAAU,kBACVE,QAASzB,KAAKsC,mBAFhB,QAyCF,MA/B4B,SAAxBtC,KAAKW,MAAM4B,WAEbP,EACEb,EAAAC,EAAAC,cAAA,SACEE,UAAU,eACVI,KAAK,OACLlB,MAAOT,KAAKW,MAAMJ,KAClBmB,SAAU1B,KAAKI,kBAMnB0C,EACE3B,EAAAC,EAAAC,cAAAF,EAAAC,EAAAE,SAAA,KACEH,EAAAC,EAAAC,cAAA,UACEE,UAAU,kBACVE,QAASzB,KAAKwC,mBAFhB,QAMArB,EAAAC,EAAAC,cAAA,UACEE,UAAU,kBACVE,QAASzB,KAAK2C,qBAFhB,YAWJxB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACZS,GAEHb,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACZuB,EACD3B,EAAAC,EAAAC,cAAA,UACEE,UAAU,iBACVE,QAASzB,KAAK4C,qBAFhB,mBA3FgBf,aA+GXC,cAAQ,KARI,SAAAC,GACzB,MAAO,CACLU,SAAY,SAACC,EAAOV,GAAR,OAAiBD,EHtGK,CACpCJ,KCP0B,YDQ1BM,QGoGkD,CAAES,QAAOV,WACzDa,WAAY,SAACH,GAAD,OAAWX,EHlGD,SAACW,GAAD,MAAY,CACpCf,KCX0B,cDY1BM,QAASS,GGgG0BG,CAAWH,OAKjCZ,CAAkCO,GC/G3CU,mLAEF,OACE5B,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACXvB,KAAKJ,MAAMoD,MAAMC,IAAI,SAACjB,EAAMU,GAAP,OACpBvB,EAAAC,EAAAC,cAAA,MAAI6B,IAAKR,EAAOnB,UAAU,6BAEtBJ,EAAAC,EAAAC,cAAC8B,EAAD,CACEnB,KAAMA,EACNU,MAAOA,eATJb,aA+BJC,cAZS,SAAAnB,GACtB,MAAO,CACLqC,MAAOrC,EAAMyC,YAAYJ,QAIF,SAAAjB,GACzB,MAAO,IAKMD,CAA6CiB,GChCtDM,mLAEF,OACElC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,kBACAF,EAAAC,EAAAC,cAAA,MAAIE,UAAU,cACXvB,KAAKJ,MAAM0D,MAAML,IAAI,SAACd,EAAMO,GAAP,OACpBvB,EAAAC,EAAAC,cAAA,MAAI6B,IAAKR,EAAOnB,UAAU,6BACvBY,cARSN,aAuBTC,cANS,SAAAnB,GACtB,MAAO,CACL2C,MAAO3C,EAAM4C,YAAYD,QAIW,KAAzBxB,CAA+BuB,0BCtBxCG,EAAoB,CACxBR,MAAO,IAGHS,EAAoB,CACxBH,MAAO,IAmEHI,EAAcC,YAAgB,CAClCP,YAjEkB,WAAuC,IAAtCzC,EAAsCiD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA9BJ,EAAmBO,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzD,OAAQC,EAAOpC,MACb,ILdwB,WKetB,OAAO7B,OAAAkE,EAAA,EAAAlE,CAAA,GACFa,EADL,CAEEqC,MAAK,GAAAxB,OAAA1B,OAAAmE,EAAA,EAAAnE,CAAMa,EAAMqC,OAAZ,CAAmBe,EAAO9B,YAEnC,ILjBwB,cKgCtB,IAAIiC,EAAWvD,EAAMqC,MAAMmB,OAAO,SAACC,EAAS1B,GAAV,OAAoBA,IAAUqB,EAAO9B,UAGvE,OAAOnC,OAAAkE,EAAA,EAAAlE,CAAA,GACFa,EADL,CAEEqC,MAAOkB,IAGX,ILzCwB,YK6CtB,IAAIlB,EAAKlD,OAAAmE,EAAA,EAAAnE,CAAOa,EAAMqC,OAElBN,EAAQqB,EAAO9B,QAAQS,MACvBV,EAAO+B,EAAO9B,QAAQD,KAI1B,OAHAgB,EAAMN,GAASV,EAGRlC,OAAAkE,EAAA,EAAAlE,CAAA,GACFa,EADL,CAEEqC,UAGJ,QACE,OAAOrC,IAmBX4C,YAfkB,WAAuC,IAAtC5C,EAAsCiD,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAA9BH,EAAmBM,EAAWH,UAAAC,OAAA,EAAAD,UAAA,QAAAE,EACzD,OAAQC,EAAOpC,MACb,IL9DwB,WK+DtB,OAAO7B,OAAAkE,EAAA,EAAAlE,CAAA,GACFa,EADL,CAEE2C,MAAK,GAAA9B,OAAA1B,OAAAmE,EAAA,EAAAnE,CAAMa,EAAM2C,OAAZ,CAAmBS,EAAO9B,YAGnC,QACE,OAAOtB,MAWE0D,EAFDC,YAAYZ,EAAaa,OAAOC,8BAAgCD,OAAOC,gCC3DtEC,mLAZX,OACEtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,CAAUL,MAAOA,GACflD,EAAAC,EAAAC,cAAA,OAAKE,UAAU,iBACbJ,EAAAC,EAAAC,cAACsD,EAAD,MACAxD,EAAAC,EAAAC,cAACuD,EAAD,MACAzD,EAAAC,EAAAC,cAACwD,EAAD,eAPQhD,aCIEiD,QACW,cAA7BP,OAAOQ,SAASC,UAEe,UAA7BT,OAAOQ,SAASC,UAEhBT,OAAOQ,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.dce5169f.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { addTodo } from '../../store/actions/todoAction'\nimport { addNote } from '../../store/actions/noteAction'\n\nclass Form extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      text: '',\n      choice: 'Todo'\n    }\n  }  \n\n  onChangeHandler = (e) => {\n    this.setState({ text : e.target.value })\n  }\n\n  onSubmit = () => {\n    if(this.state.choice === 'Todo') {\n      this.props.addTodos(this.state.text)\n    } else {\n      this.props.addNotes(this.state.text)\n    }\n    \n    this.setState({ text: '' })\n  }\n\n  onClickChoice = (value) => {\n    this.setState({ choice: value })\n  }\n\n  render () {\n    var styleButtonTodo = ''\n    var styleButtonNotes = ''\n    if(this.state.choice === 'Todo') {\n      styleButtonTodo = 'btn-success'\n    } else {\n      styleButtonNotes = 'btn-success'      \n    }\n    return (\n      <>\n        <button \n          className={`btn m-2 ${styleButtonTodo}`} \n          onClick={ () => this.onClickChoice('Todo')}\n        >\n          Switch to Add Todo\n        </button>\n        <button \n          className={`btn ${styleButtonNotes}`}\n          onClick={() => this.onClickChoice('Notes')}\n        >\n          Switch to Add Notes\n        </button>\n        <p>Add {this.state.choice}</p>\n        <div className=\"form-group\">\n          <input \n          value={this.state.text}\n          onChange={this.onChangeHandler} type=\"text\" className=\"form-control\" placeholder=\"Type todo here\" />\n        </div>\n        <button onClick={this.onSubmit} className=\"btn btn-primary\">Add</button>\n      </>\n    )\n  }\n} \n\nconst mapDispatchToProps = dispatch => {\n  return {\n    addTodos: (todo) => dispatch(addTodo(todo)),\n    addNotes: (note) => dispatch(addNote(note))\n  }\n}\n\nexport default connect(null, mapDispatchToProps)(Form)\n","import * as actionTypes from './actionTypes'\n\nexport const addTodo = (todo) => ({ \n  type: actionTypes.ADD_TODO, \n  payload: todo \n})\n\nexport const editTodo = (payload) => ({\n  type: actionTypes.EDIT_TODO,\n  payload: payload\n})\n\nexport const deleteTodo = (index) => ({\n  type: actionTypes.DELETE_TODO,\n  payload: index\n})\n","export const ADD_TODO     = 'ADD_TODO'\nexport const EDIT_TODO    = 'EDIT_TODO'\nexport const DELETE_TODO  = 'DELETE_TODO'\nexport const ADD_NOTE     = 'ADD_NOTE'\n","import * as actionTypes from './actionTypes'\n\nexport const addNote = (note) => ({\n  type: actionTypes.ADD_NOTE,\n  payload: note\n})\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { editTodo, deleteTodo } from '../../store/actions/todoAction'\n\nclass TextAndForm extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      viewMode: 'show',\n      text: props.todo\n    }\n  }\n  \n  // fungsi untuk handle ketika user klik tombol edit\n  editButtonHandler = () => {\n    this.setState({ viewMode: 'edit'})\n  }\n\n  // fungsi untuk handle ketika user klik tombol save\n  saveButtonHandler = () => {\n    this.props.editTodo(this.props.index, this.state.text)\n    this.setState({ viewMode: 'show' })\n  }\n\n  // fungsi untuk handle ketika user klik tombol cancel\n  cancelButtonHandler = () => {\n    this.setState({ viewMode: 'show'})\n  }\n\n  // fungsi untuk handle ketika user edit text di form\n  onChangeHandler = (e) => {\n    this.setState({ text: e.target.value })\n  }\n\n  // fungsi untuk handle ketika user klik tombol delete\n  deleteButtonHandler = () => {\n    this.props.deleteTodo(this.props.index)\n  }\n\n  render() {\n    // default tampilan todo berupa text\n    var todo = (\n      <p>{this.props.todo}</p>\n    )\n\n    // defaut tampilan disamping text todo berupa tombol edit\n    var buttonEdit = (\n      <button\n        className=\"btn btn-primary\"\n        onClick={this.editButtonHandler}\n      >\n        Edit\n      </button>\n    )\n\n\n    // jika viewMode berubah menjadi 'edit',\n    if (this.state.viewMode === 'edit') {\n      // ganti element text todo menjadi form input\n      todo = (\n        <input\n          className=\"form-control\"\n          type=\"text\"\n          value={this.state.text}\n          onChange={this.onChangeHandler}\n        />\n      )\n\n\n      // ganti tombol ediit menjadi tombol save dan cancel\n      buttonEdit = (\n        <>\n          <button\n            className=\"btn btn-success\"\n            onClick={this.saveButtonHandler}\n          >\n            Save\n          </button>\n          <button\n            className=\"btn btn-warning\"\n            onClick={this.cancelButtonHandler}\n          >\n            Cancel\n          </button>\n        </>\n      )\n    }\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-8\">\n          {todo}\n        </div>\n        <div className=\"col-4\">\n          {buttonEdit}\n          <button\n            className=\"btn btn-danger\"\n            onClick={this.deleteButtonHandler}\n          >\n            Delete\n          </button>\n        </div>\n      </div>\n    )\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    editTodo  : (index, todo) => dispatch( editTodo({ index, todo }) ),\n    deleteTodo: (index) => dispatch( deleteTodo(index) )  \n  }\n}\n\n\nexport default connect(null, mapDispatchToProps)(TextAndForm)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport TextAndForm from './TextAndForm'\n\nclass List extends Component {\n  render (){\n    return (\n      <ul className=\"list-group\">\n        {this.props.todos.map((todo, index) => (\n          <li key={index} className=\"list-group-item container\">\n\n              <TextAndForm\n                todo={todo}\n                index={index}\n              />\n\n          </li>\n        ))}\n      </ul>\n    )    \n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    todos: state.todoReducer.todos\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(List)\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\n\nclass NotesList extends Component {\n  render (){\n    return (\n      <div>\n        <p>Notes</p>\n        <ul className=\"list-group\">\n          {this.props.notes.map((note, index) => (\n            <li key={index} className=\"list-group-item container\">\n              {note}\n            </li>\n          ))}\n        </ul>\n      </div>\n    )    \n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    notes: state.noteReducer.notes\n  }\n}\n\nexport default connect(mapStateToProps, null)(NotesList)\n","import { createStore, combineReducers } from 'redux'\nimport * as actionTypes from './actions/actionTypes'\n\n// initial state dipisah\nconst initialStateTodos = {\n  todos: []\n}\n\nconst initialStateNotes = {\n  notes: []\n}\n\nconst todoReducer = (state = initialStateTodos, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_TODO:\n      return {\n        ...state,\n        todos: [...state.todos, action.payload]\n      }\n    case actionTypes.DELETE_TODO:\n      // // menghapus dengan method splice\n\n      // // copy state todos \n      // let newTodos = [...state.todos]\n      // // hapus element array\n      // newTodos.splice(action.payload, 1)\n\n      // // return state baru\n      // return {\n      //   ...state,\n      //   todos: newTodos\n      // }\n\n      // menghapus dengan method filter\n      let newTodos = state.todos.filter((element, index) => index !== action.payload)\n\n      // return state baru\n      return {\n        ...state,\n        todos: newTodos\n      }\n\n    case actionTypes.EDIT_TODO:\n      // edit state\n\n      // copy state todos \n      let todos = [...state.todos]\n      // ganti data todo\n      let index = action.payload.index\n      let todo = action.payload.todo\n      todos[index] = todo\n\n      // return state baru\n      return {\n        ...state,\n        todos\n      }\n\n    default:\n      return state\n  }\n}\n\nconst noteReducer = (state = initialStateNotes, action) => {\n  switch (action.type) {\n    case actionTypes.ADD_NOTE:\n      return {\n        ...state,\n        notes: [...state.notes, action.payload]\n      }\n\n    default:\n      return state\n  }\n}\n\nconst rootReducer = combineReducers({\n  todoReducer: todoReducer,\n  noteReducer: noteReducer\n})\n\nconst store = createStore(rootReducer, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nexport default store\n","import React, { Component } from 'react';\nimport './App.css';\nimport Form from './components/Form/Form'\nimport List from './components/List/List'\nimport NotesList from './components/NotesList/NotesList'\nimport { Provider } from 'react-redux'\nimport store from './store'\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <div className=\"App container\">\n          <Form/>\n          <List/>\n          <NotesList/>\n        </div>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}